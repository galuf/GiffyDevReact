{"version":3,"sources":["components/Gif.js","services/getGifs.js","components/ListOfGifs.js","App.js","reportWebVitals.js","index.js"],"names":["Gif","title","url","id","className","href","src","alt","api_key","ListOfGifs","keyword","params","useState","gifs","setGifs","useEffect","console","log","apiURL","fetch","then","res","json","response","data","map","image","images","downsized_medium","getGifs","App","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAEe,SAASA,EAAT,GAAkC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAAKC,EAAM,EAANA,GACxC,OACE,sBAAKC,UAAU,aAAf,UACE,mBAAGC,KAAI,WAAMF,GAAb,SAAoBF,IACpB,qBAAKK,IAAKJ,EAAKK,IAAKN,OCN1B,IAAMO,EAAQ,mCCIC,SAASC,EAAT,GAAiC,IACtCC,EADqC,EAAVC,OAC3BD,QADqC,EAGrBE,mBAAS,IAHY,mBAGtCC,EAHsC,KAGhCC,EAHgC,KAmB7C,OAZAC,qBAAU,WAERC,QAAQC,IAAI,aDXD,WAA2C,IAAD,0DAAH,IAArBP,eAAwB,MAAd,QAAc,EACjDQ,EAAM,uDAAmDV,EAAnD,cAAgEE,EAAhE,uCACZ,OAAOS,MAAMD,GACRE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAOJ,OANeA,EAARC,KACWC,KAAI,SAAAC,GAAQ,IACrBC,EAAoBD,EAApBC,OAEP,MAAO,CAAC1B,MAFmByB,EAAZzB,MAEAE,GAFYuB,EAANvB,GAEFD,IADLyB,EAAOC,iBAAd1B,WCMb2B,CAAQ,CAAEnB,YAAWU,MAAK,SAACP,GAAD,OAAUC,EAAQD,QAC3C,CAACH,IAOF,mCACGG,EAAKY,KAAI,YAAyB,IAAtBxB,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,IAAKC,EAAS,EAATA,GACvB,OAAO,cAACH,EAAD,CAAcC,MAAOA,EAAOE,GAAIA,EAAID,IAAKA,GAA/BC,QCQV2B,MA7Bf,WAAgB,IAAD,EACiBlB,mBAAS,SAD1B,mBAEb,OAFa,UAGX,qBAAKR,UAAU,MAAf,SACE,0BAASA,UAAU,cAAnB,UACE,2CACA,sBAAKA,UAAU,QAAf,UACE,cAAC,IAAD,CAAM2B,GAAG,aAAa3B,UAAU,OAAhC,oBAGA,cAAC,IAAD,CAAM2B,GAAG,eAAe3B,UAAU,OAAlC,qBAGA,cAAC,IAAD,CAAM2B,GAAG,iBAAiB3B,UAAU,OAApC,uBAGA,cAAC,IAAD,CAAM2B,GAAG,YAAY3B,UAAU,OAA/B,kBAGA,cAAC,IAAD,CAAM2B,GAAG,cAAc3B,UAAU,OAAjC,uBAIF,cAAC,IAAD,CAAO4B,KAAK,gBAAgBC,UAAWxB,UChBhCyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6b539ae0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Gif({ title, url, id }) {\n  return (\n    <div className=\"gifElement\">\n      <a href={`#${id}`}>{title}</a>\n      <img src={url} alt={title} />\n    </div>\n  );\n}\n","const api_key=\"wwAFAC9GwkVhHlgHumtmrG2T4tqSQ5Qv\"\n\nexport default function getGifs({keyword = 'morty'} = {}){\n  const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${api_key}&q=${keyword}&limit=10&offset=0&rating=g&lang=en`;\n  return fetch(apiURL)\n      .then(res => res.json())\n      .then(response => {\n        const {data} = response\n        const gifs = data.map(image=>{\n          const {images, title,id} = image\n          const {url} = images.downsized_medium\n          return {title, id, url}\n        })\n        return gifs;\n      })\n}","import React, { useEffect, useState } from \"react\";\nimport Gif from \"./Gif\";\nimport getGifs from \"../services/getGifs\";\n\nexport default function ListOfGifs({ params }) {\n  const { keyword } = params;\n\n  const [gifs, setGifs] = useState([]);\n  // Cuando se renderiza un componente ?\n  // En un cambio de estado se vuelve a renderizar el componente\n  // Tambien cuando recibe props, no importa aque sean las mismas o diferentes.\n  useEffect(() => {\n    // Sin el segundo parametro -> El efecto se ejecuta cada ves q se renderiza el componente\n    console.log(\"Ejecucion\");\n\n    //LLAMADA A UN API\n    getGifs({ keyword }).then((gifs) => setGifs(gifs));\n  }, [keyword]);\n  // UseEffect -> recive dos parametros 1er (funcion a ejecutar)\n  // -> 2do ( dependencias del efecto, (variables que si cambian debe ejecutar el efecto)) se define como array\n  // si el segundo es [], esto nos indicara que solo se ejecutara una vez\n  // didMount() == useEfect(()=>{},[])\n\n  return (\n    <>\n      {gifs.map(({ title, url, id }) => {\n        return <Gif key={id} title={title} id={id} url={url} />;\n      })}\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link, Route } from \"wouter\";\nimport \"./App.css\";\nimport ListOfGifs from \"./components/ListOfGifs\";\n\nfunction App() {\n  const [keyword, setKeyword] = useState(\"panda\");\n  return (\n    <div className=\"App\">\n      <section className=\"App-content\">\n        <h1>App Giffy</h1>\n        <div className=\"links\">\n          <Link to=\"/gif/panda\" className=\"link\">\n            Pandas\n          </Link>\n          <Link to=\"/gif/ecuador\" className=\"link\">\n            Ecuador\n          </Link>\n          <Link to=\"/gif/barcelona\" className=\"link\">\n            Barcelona\n          </Link>\n          <Link to=\"/gif/peru\" className=\"link\">\n            Peru\n          </Link>\n          <Link to=\"/gif/matrix\" className=\"link\">\n            Matrix\n          </Link>\n        </div>\n        <Route path=\"/gif/:keyword\" component={ListOfGifs} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}